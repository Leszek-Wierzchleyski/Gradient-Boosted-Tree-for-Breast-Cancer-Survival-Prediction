#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct  3 22:59:20 2024

@author: leszekwierzchleyski
"""
"""This Script runs a histogram based gradient boosted tree model on the 
METABRIC dataset and tries to predict whether each patient died from cancer
Many thanks to Cancer Research UK, the British Columbia Cancer Foundation and Canadian Breast Cancer Foundation """

import sklearn
import pandas as pd
from sklearn import model_selection
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
from sklearn import ensemble
import numpy as np

File = 'METABRIC_RNA_Mutation.csv'
Dataset = pd.read_csv(File)

"""Prepare Labels"""

    
label_list = []

for i in range(len(Dataset)):
    if Dataset.iloc[:,30][i] == "Died of Disease":
        label = 1
    else:
        label = 0
    label_list.append(label)
y_train = label_list

File2 = 'Encoded_METABRIC.csv'
Dataset2 = pd.read_csv(File2)
print(Dataset2.head())

"""Train test split"""

x_train, x_test, y_train, y_test= model_selection.train_test_split(Dataset2, y_train, test_size=0.2, random_state=1)

"""Tree Model"""
classi = ensemble.HistGradientBoostingClassifier(loss='log_loss',  
                                                 learning_rate=0.1, 
                                                 max_iter=200, 
                                                 max_leaf_nodes=1000, 
                                                 max_depth=13, 
                                                 min_samples_leaf=2, 
                                                 l2_regularization=1.0, 
                                                  
                                                 max_bins=255, 
                                                 categorical_features=None, 
                                                 monotonic_cst=None, 
                                                 interaction_cst=None, 
                                                 warm_start=False, 
                                                 early_stopping=False, 
                                                 scoring='loss', 
                                                 validation_fraction=0.2, 
                                                 n_iter_no_change=10, 
                                                 tol=1e-07, verbose=2, 
                                                 random_state=None, 
                                                 class_weight=None)
classi.fit(x_train, y_train) 
Trainscore = classi.score(x_train,y_train)
pred = classi.predict(x_test)
score = classi.score(x_test,y_test)
acc = accuracy_score(y_test, pred)



print("Train Accuracy:", Trainscore)
print("Test Accuracy:", score)
print("Accuracy:",   acc)
